qplot(date, steps)
ggplot(activity, aes(date, steps))
ggplot(activity, aes(date, steps)) + geom_bar()
ggplot(activity, aes(date, steps)) + geom_bar(aes(steps))
?geom_bar
ggplot(activity, aes(date, steps)) + geom_histogram()
detach(activity)
act <- activity
remove(activity)
qplot(act$date, act$steps
)
qplot(act$date, act$steps, geom = c("barplot")
)
qplot(act$date, act$steps, geom = c("bar"))
a <- act[,1:2]
a
head(a
)
a$date <- as.factor(a$date)
barplot(a$date, a$steps)
barplot(a$date, a$steps)
barplot(a$steps)
qplot(a)
qplot(a$date, a$steps)
ls()
remove(a, date)
with(activity, tapply(steps, date, sum)
)
with(act, tapply(steps, date, sum))
with(act, tapply(steps, date, sum, na.rm = T))
tsteps <- with(act, tapply(steps, date, sum, na.rm = T))
class(tsteps_
class(tsteps)
hist(tsepts)
hist(tsteps)
ls()
ac <- read.csv("activity.csv")
head(ac)
tsd <- with(ac, tapply(steps, date, sum, na.rm = T))
hist(tsd, main = "Histogram of Steps Taken Each Day", xlab = "Steps")
meantsd <- mean(tsd)
meditsd <- median(tsd)
msi <- as.data.frame(with(ac, tapply(steps, interval, mean, na.rm = T)))
msi$interval <- rownames(msi)
names(msi) <- c("steps", "interval")
plot(msi$interval, msi$steps, type = "l", main = "Average Number of Steps Taken", xlab = "Intervals", ylab = "Average Steps")
msi[which.max(msi$steps),]
# Maximum number of steps is in interval 835, it is around 7 am.
```
tmv = nrow(ac) - sum(complete.cases(ac))
tmv
sum(is.na(ac$steps))
sum(is.na(ac$date))
sum(is.na(ac$interval))
m.index <- is.na(ac$steps)
mindex
m.index
m.index <- ac$interval(is.na(ac$steps))
m.index <- ac$interval[is.na(ac$steps)]
m.index
msi
fill.m <- data.frame(m.index)
fill.m
fill.m <- data.frame(m.index, ave.steps = NA)
fill.m
m.index
msi
m.index <- data.frame(steps = is.na(ac$steps))
m.index
fmv <- data.frame(steps = ac$interval[is.na(ac$steps)]
fmv <- data.frame(steps = ac$interval[is.na(ac$steps)])
head(fmv)
fmv <- data.frame(interval = ac$interval[is.na(ac$steps)])
fmv
head(fmv)
msi
fmv <- merge(fmv, msi)
fmv
fmv <- data.frame(interval = ac$interval[is.na(ac$steps)], index = c(1: 2304))
head(fmv)
fmv <- merge(fmv, msi)
fmv
head(fmv)
fmv <- fmv[sort(fmv$index),]
fmv
fmv <- data.frame(interval = ac$interval[is.na(ac$steps)], index = c(1: 2304))
fmv <- merge(fmv, msi)
fmv <- fmv[order(fmv$index),]
fmv
head(fmv)
ac$steps[is.na(ac$steps)]
ac$steps[is.na(ac$steps)] <- fmv$steps
ac$steps[is.na(ac$steps)] <- fmv$steps
tmv = nrow(ac) - sum(complete.cases(ac))
tmv
ac <- read.csv("activity.csv")
head(ac)
tsd <- with(ac, tapply(steps, date, sum, na.rm = T))
hist(tsd, main = "Histogram of Steps Taken Each Day", xlab = "Steps")
```
###3. Mean and median of the total number of steps taken per day
```{r}
meantsd <- mean(tsd)
meditsd <- median(tsd)
#Mean of the total number of steps taken each day:
meantsd
#Median of total number of steps taken each day:
meditsd
```
###4. Time series plot of the average number of steps taken
```{r}
# msi = mean number of steps by interval
msi <- as.data.frame(with(ac, tapply(steps, interval, mean, na.rm = T)))
msi$interval <- rownames(msi)
names(msi) <- c("steps", "interval")
plot(msi$interval, msi$steps, type = "l", main = "Average Number of Steps Taken", xlab = "Intervals", ylab = "Average Steps")
```
5. The 5-minute interval that, on average, contains the maximum number of steps
``` {r}
msi[which.max(msi$steps),]
# Maximum number of steps is in interval 835, it is around 7 am.
```
###6. Code to describe and show a strategy for imputing missing data
####6.1 Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
``` {r}
# tmv = total number of missing values
tmv = nrow(ac) - sum(complete.cases(ac))
tmv
# Total number of missing values in the dataset is 2304.
```
####6.2 Strategy for filling in all of the missing values in the dataset
Replace missing values with the average steps for each interval.
``` {r}
#fmv = fill missing values
#Merge function will change the original row order of fmv data frame, which is the order I'll use to fill the missing values in ac data frame. An extra index column could fix this problem.
fmv <- data.frame(interval = ac$interval[is.na(ac$steps)], index = c(1: 2304))
fmv <- merge(fmv, msi)
fmv <- fmv[order(fmv$index),]
ac.new <- ac
ac.new$steps[is.na(ac$steps)] <- fmv$steps
head(ac.new)
nrow(ac.new) - sum(complete.cases(ac.new))
tsd.new <- with(ac.new, tapply(steps, date, sum, na.rm = T))
hist(tsd.new, main = "Histogram of Steps Taken Each Day", xlab = "Steps")
par(mfrow = c(1, 2))
par(mfrow = c(1, 2))
hist(tsd. main = main = "Histogram of Steps Taken Each Day", xlab = "Steps")
hist(tsd.new, main = "Histogram of Steps Taken Each Day (No Missing Values)", xlab = "Steps")
par(mfrow = c(1, 2))
hist(tsd, main = main = "Histogram of Steps Taken Each Day", xlab = "Steps")
hist(tsd.new, main = "Histogram of Steps Taken Each Day (No Missing Values)", xlab = "Steps")
par(mfrow = c(1, 2))
hist(tsd, main = "Histogram of Steps Taken Each Day", xlab = "Steps")
par(mfrow = c(1, 2))
hist(tsd, main = "Steps Taken Each Day", xlab = "Steps")
hist(tsd.new, main = "Steps Taken Each Day (No Missing Values)", xlab = "Steps")
hist(tsd, main = "Steps Taken Each Day", xlab = "Steps")
hist(tsd.new, main = "No Missing Values", xlab = "Steps")
hist(tsd, main = "Steps Taken Each Day", xlab = "Steps", ylim = c(0,35))
hist(tsd.new, main = "No Missing Values", xlab = "Steps")
nrow(ac.new) - complete.cases(ac.new)
nrow(ac.new) - complete.cases(ac.new)
nrow(ac.new) - sum(complete.cases(ac.new))
?hist
par(mfrow = c(1, 2))
hist(tsd, main = "Steps Taken Each Day", xlab = "Steps", ylim = c(0,35), breaks = 10)
hist(tsd.new, main = "No Missing Values", xlab = "Steps", breaks = 10)
par(mfrow = c(1, 2))
hist(tsd, main = "Steps Taken Each Day", xlab = "Steps", ylim = c(0,35), breaks = 10)
hist(tsd.new, main = "No Missing Values", xlab = "Steps", ylim = c(0,35), breaks = 10)
par(mfrow = c(1, 2))
hist(tsd, main = "Steps Taken Each Day", xlab = "Steps", ylim = c(0,30), breaks = 10)
hist(tsd.new, main = "No Missing Values", xlab = "Steps", ylim = c(0,30), breaks = 10)
par(mfrow = c(1, 2))
hist(tsd, main = "Steps Taken Each Day", xlab = "Steps", ylim = c(0,25), breaks = 10)
hist(tsd.new, main = "No Missing Values", xlab = "Steps", ylim = c(0,25), breaks = 10)
meantsd.new <- mean(tsd.new)
meditsd.new <- median(tsd.new)
meantsd; meansd.new
meantsd; meantsd.new
meditsd; meditsd.new
(meantsd.new - meantsd)/meantsd
(meditsd.new - meditsd) / meditsd
weekdays(ac.new$date))
weekdays(ac.new$date)
ac.new$date <- as.Date(ac.new$date)
weekdays(ac.new$date)
Sys.setenv(LANGUAGE="en")
weekdays(ac.new$date)
ls()
class(ac.new$date)
weekdays(ac.new$date)
for (i in 1:nrow(ac.new)) {
ac.new$type[i] <-
for (i in 1:nrow(ac.new)) {
if (ac.new$date %in% c("星期一", "星期二", "星期三", "星期四", "星期五")) ac.new$type[i] <- "weekdays"
if (ac.new$date %in% c("星期六", "星期日")) as.new$type[i] <- "weekends"
}
weekdays(ac.new$date)
remove(list = ls())
```{r}
ac <- read.csv("activity.csv")
head(ac)
###2. Histogram of the total number of steps taken each day
```
```{r}
# tsd = total steps by day
tsd <- with(ac, tapply(steps, date, sum, na.rm = T))
hist(tsd, main = "Histogram of Steps Taken Each Day", xlab = "Steps")
```
###3. Mean and median of the total number of steps taken per day
meantsd <- mean(tsd)
meditsd <- median(tsd)
#Mean of the total number of steps taken each day:
#Median of total number of steps taken each day:
```
###4. Time series plot of the average number of steps taken
msi <- as.data.frame(with(ac, tapply(steps, interval, mean, na.rm = T)))
msi$interval <- rownames(msi)
plot(msi$interval, msi$steps, type = "l", main = "Average Number of Steps Taken", xlab = "Intervals", ylab = "Average Steps")
```
###5. The 5-minute interval that, on average, contains the maximum number of steps
msi[which.max(msi$steps),]
# Maximum number of steps is in interval 835, it is around 7 am.
```
####6.1 Calculate and report the total number of missing values in the dataset (i.e. the total number of rows with NAs)
``` {r}
# tmv = total number of missing values
# Total number of missing values in the dataset is 2304.
```
####6.2 Fill Missing Values
Replace missing values with the average steps for each interval.
``` {r}
#fmv = fill missing values
#Merge function will change the original row order of fmv data frame, which is the order I'll use to fill the missing values in ac data frame. An extra index column could fix this problem.
fmv <- data.frame(interval = ac$interval[is.na(ac$steps)], index = c(1: 2304))
fmv <- merge(fmv, msi)
fmv <- fmv[order(fmv$index),]
ac.new <- ac
ac.new$steps[is.na(ac$steps)] <- fmv$steps
```
Check if missing values still exist.
```{r}
nrow(ac.new) - sum(complete.cases(ac.new))
```
###7. Histogram of the total number of steps taken each day after missing values are imputed
``` {r}
# tsd.new = total steps by day using ac.new
tsd.new <- with(ac.new, tapply(steps, date, sum, na.rm = T))
par(mfrow = c(1, 2))
hist(tsd, main = "Steps Taken Each Day", xlab = "Steps", ylim = c(0,25), breaks = 10)
hist(tsd.new, main = "No Missing Values", xlab = "Steps", ylim = c(0,25), breaks = 10)
```
The new histogram looks more normally distributed than the orginal one because of the filling of the missing values using average steps of each interval. The main changes happened in lower number of steps and middle number of steps. The former one decreased and the latter one increased largely. Others remain unchanged, because there were no missing values in there.
```{r}
meantsd.new <- mean(tsd.new)
meditsd.new <- median(tsd.new)
meantsd; meantsd.new; (meantsd.new - meantsd) / meantsd
#Median of total number of steps taken each day before and after the filling of missing values, and the percentage changes:
meditsd; meditsd.new; (meditsd.new - meditsd) / meditsd
```
###8. Panel plot comparing the average number of steps taken per 5-minute interval across weekdays and weekends
```{r}
ac.new$date <- as.Date(ac.new$date)
###6. Code to describe and show a strategy for imputing missing data
names(msi) <- c("steps", "interval")
meantsd
tmv = nrow(ac) - sum(complete.cases(ac))
tmv
# msi = mean number of steps by interval
```{r}
```{r}
meditsd
Both mean and median number of steps increased, but mean number of steps increased more apparently, maybe because the mean was more sensitive to extreme values.
``` {r}
#Mean of the total number of steps taken each day before and after the filling of missing values, and the percentage changes:
as.new
ac.new
head(ac.new)
ac <- read.csv("activity.csv")
head(ac)
tsd <- with(ac, tapply(steps, date, sum, na.rm = T))
hist(tsd, main = "Histogram of Steps Taken Each Day", xlab = "Steps")
par(mfrow = c(1, 1)
tsd <- with(ac, tapply(steps, date, sum, na.rm = T))
hist(tsd, main = "Histogram of Steps Taken Each Day", xlab = "Steps")
par(mfrow = c(1, 1))
tsd <- with(ac, tapply(steps, date, sum, na.rm = T))
hist(tsd, main = "Histogram of Steps Taken Each Day", xlab = "Steps")
meantsd <- mean(tsd)
meditsd <- median(tsd)
meantsd
meditsd
msi <- as.data.frame(with(ac, tapply(steps, interval, mean, na.rm = T)))
msi$interval <- rownames(msi)
names(msi) <- c("steps", "interval")
plot(msi$interval, msi$steps, type = "l", main = "Average Number of Steps Taken", xlab = "Intervals", ylab = "Average Steps")
msi[which.max(msi$steps),]
tmv = nrow(ac) - sum(complete.cases(ac))
tmv
fmv <- data.frame(interval = ac$interval[is.na(ac$steps)], index = c(1: 2304))
fmv <- merge(fmv, msi)
fmv <- fmv[order(fmv$index),]
ac.new <- ac
ac.new$steps[is.na(ac$steps)] <- fmv$steps
nrow(ac.new) - sum(complete.cases(ac.new))
tsd.new <- with(ac.new, tapply(steps, date, sum, na.rm = T))
par(mfrow = c(1, 2))
hist(tsd, main = "Steps Taken Each Day", xlab = "Steps", ylim = c(0,25), breaks = 10)
hist(tsd.new, main = "No Missing Values", xlab = "Steps", ylim = c(0,25), breaks = 10)
meantsd.new <- mean(tsd.new)
meditsd.new <- median(tsd.new)
meantsd; meantsd.new; (meantsd.new - meantsd) / meantsd
#Median of total number of steps taken each day before and after the filling of missing values, and the percentage changes:
meditsd; meditsd.new; (meditsd.new - meditsd) / meditsd
ac.new$date <- as.Date(ac.new$date)
head(ac.new)
ac.new$steps[is.na(ac$steps)] <- round(fmv$steps, 0)
nrow(ac.new) - sum(complete.cases(ac.new))
tsd.new <- with(ac.new, tapply(steps, date, sum, na.rm = T))
par(mfrow = c(1, 2))
hist(tsd, main = "Steps Taken Each Day", xlab = "Steps", ylim = c(0,25), breaks = 10)
hist(tsd.new, main = "No Missing Values", xlab = "Steps", ylim = c(0,25), breaks = 10)
meantsd.new <- mean(tsd.new)
meditsd.new <- median(tsd.new)
meantsd; meantsd.new; (meantsd.new - meantsd) / meantsd
#Median of total number of steps taken each day before and after the filling of missing values, and the percentage changes:
meditsd; meditsd.new; (meditsd.new - meditsd) / meditsd
ac.new$date <- as.Date(ac.new$date)
head(ac.new)
head(ac.new, 100)
ac <- read.csv("activity.csv")
head(ac)
# tsd = total steps by day
par(mfrow = c(1, 1))
tsd <- with(ac, tapply(steps, date, sum, na.rm = T))
hist(tsd, main = "Histogram of Steps Taken Each Day", xlab = "Steps")
meantsd <- mean(tsd)
meditsd <- median(tsd)
#Mean of the total number of steps taken each day:
meantsd
#Median of total number of steps taken each day:
meditsd
# msi = mean number of steps by interval
msi <- as.data.frame(with(ac, tapply(steps, interval, mean, na.rm = T)))
msi$interval <- rownames(msi)
names(msi) <- c("steps", "interval")
plot(msi$interval, msi$steps, type = "l", main = "Average Number of Steps Taken", xlab = "Intervals", ylab = "Average Steps")
msi[which.max(msi$steps),]
# Maximum number of steps is in interval 835, it is around 7 am.
msi[which.max(msi$steps),]
# Maximum number of steps is in interval 835, it is around 7 am.
# tmv = total number of missing values
tmv = nrow(ac) - sum(complete.cases(ac))
tmv
# Total number of missing values in the dataset is 2304.
#fmv = fill missing values
#Merge function will change the original row order of fmv data frame, which is the order I'll use to fill the missing values in ac data frame. An extra index column could fix this problem.
fmv <- data.frame(interval = ac$interval[is.na(ac$steps)], index = c(1: 2304))
fmv <- merge(fmv, msi)
fmv <- fmv[order(fmv$index),]
ac.new <- ac
ac.new$steps[is.na(ac$steps)] <- round(fmv$steps, 0)
nrow(ac.new) - sum(complete.cases(ac.new))
# tsd.new = total steps by day using ac.new
tsd.new <- with(ac.new, tapply(steps, date, sum, na.rm = T))
par(mfrow = c(1, 2))
hist(tsd, main = "Steps Taken Each Day", xlab = "Steps", ylim = c(0,25), breaks = 10)
hist(tsd.new, main = "No Missing Values", xlab = "Steps", ylim = c(0,25), breaks = 10)
meantsd.new <- mean(tsd.new)
meditsd.new <- median(tsd.new)
#Mean of the total number of steps taken each day before and after the filling of missing values, and the percentage changes:
meantsd; meantsd.new; (meantsd.new - meantsd) / meantsd
#Median of total number of steps taken each day before and after the filling of missing values, and the percentage changes:
meditsd; meditsd.new; (meditsd.new - meditsd) / meditsd
ac.new$date <- as.Date(ac.new$date)
weekdays(ac.new$date)
weekdays(ac.new$date)
as.new$type <- weekdays(as.new$date)
ac.new$type <- weekdays(ac.new$date)
levels(ac.new$type)
ac.new$type <- as.factor(weekdays(ac.new$date))
levels(ac.new$type)
ac.new$type[c("Monday", "Tuesday", "Wedensday", "Thursday", "Friday")]
ac.new$type[c("Monday", "Tuesday", "Wedensday", "Thursday", "Friday")] <- "Weekday"
ac.new$type <- weekdays(ac.new$date)
ac.new$type[c("Monday", "Tuesday", "Wedensday", "Thursday", "Friday")] <- "Weekday"
ac.new$type[c("Saturday")]
ac.new$type["Saturday"]
ac.new$type
ac.new$type["Sunday"]
ac.new$type[ac.new$type == "Sunday"]
weekdays <- c("Monday", "Tuesday", "Wedensday", "Thursday", "Friday")
unique(ac.new$type)
weekends <- c("Saturday", "Sunday")
ac.new$type[as.new$type %in% weekdays] <- "Weekday"
ac.new$type[ac.new$type %in% weekdays] <- "Weekday"
ac.new$date <- as.Date(ac.new$date)
ac.new$type <- weekdays(ac.new$date)
weekdays <- c("Monday", "Tuesday", "Wedensday", "Thursday", "Friday")
weekends <- c("Saturday", "Sunday")
ac.new$type[ac.new$type %in% weekdays] <- "weekday"
ac.new$type[ac.new$type %in% weekends] <- "weekend"
ac.new$type <- as.factor(ac.new$type)
str(ac.new$type)
ac.new$date <- as.Date(ac.new$date)
ac.new$type <- weekdays(ac.new$date)
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday")
weekends <- c("Saturday", "Sunday")
ac.new$type[ac.new$type %in% weekdays] <- "weekday"
ac.new$type[ac.new$type %in% weekends] <- "weekend"
ac.new$type <- as.factor(ac.new$type)
str(ac.new$type)
table(ac.new$type)
p <- xyplot(Ozone~ Wind | as.factor(Month), data=airquality, layout=c(5,1))
library(lattice)
p <- xyplot(Ozone~ Wind | as.factor(Month), data=airquality, layout=c(5,1))
names(p)
p <- xyplot(Ozone~ Wind | as.factor(Month), data=airquality, layout=c(5,1))
p
with(ac.new, tapply(steps, date, mean))
tsd.new
msi.new <- as.data.frame(with(ac.new, tapply(steps, interval, mean)))
msi.new
msi$interval <- rownames(msi)
weekday <- ac.new[ac.new$type == "weekdays",]
weekend <- ac.new[ac.new$type == "weekend",]
weekday <- ac.new[ac.new$type == "weekday",]
dim(weekend)
dim(weekday)
weekday.msi <- with(weekday, tapply(steps, interval, mean))
weekend.msi <- with(weekend, tapply(steps, interval, mean))
weekday.msi
weekend.msi
weekend.msi <- as.data.frame(with(weekend, tapply(steps, interval, mean)))
weekend.msi <- as.data.frame(with(weekend, tapply(steps, interval, mean)))
weekend.msi
weekend.msi$interval <- rownames(weekend.msi)
weekday.msi$interval <- rownames(weekday.msi)
weekday
weekday.msi <- as.data.frame(with(weekday, tapply(steps, interval, mean)))
weekday.msi$interval <- rownames(weekday.msi)
weekday
weekday$msi
weekday.msi
wd <- ac.new[ac.new$type == "weekday",]
wk <- ac.new[ac.new$type == "weekend",]
wd.msi <- as.data.frame(with(wd, tapply(steps, interval, mean)))
wk.msi <- as.data.frame(with(wk, tapply(steps, interval, mean)))
head(wd.msi)
names(wd.msi) <- "weekday.steps"
names(wk.msi) <-
names(wk.msi) <- "weekend.steps"
wd.msi$interval <- rownames(wd.msi)
wk.msi$interval <- rownames(wk.msi)
head(wd.msi)
head(wk.msi)
msi.new <- merge(wd.msi, wk.msi)
head(msi.new)
wd.msi$type <- "weekday"
wk.msi$type <- "weekend"
msi.new <- merge(wd.msi, wk.msi)
names(wd.msi) <- "steps"
names(wk.msi) <- "steps"
wd.msi <- as.data.frame(with(wd, tapply(steps, interval, mean)))
wk.msi <- as.data.frame(with(wk, tapply(steps, interval, mean)))
names(wd.msi) <- "steps"
names(wk.msi) <- "steps"
wd.msi$interval <- rownames(wd.msi)
wk.msi$interval <- rownames(wk.msi)
wd.msi$type <- "weekday"
wk.msi$type <- "weekend"
msi.new <- rbind(wd.msi, wk.msi)
head(msi.new)
dim(msi.new)
xyplot(steps ~ interval | type)
xyplot(steps ~ interval | type, data = msi.new)
msi.new
head(wd.msi)
wd.msi <- as.data.frame(with(wd, tapply(steps, interval, mean)))
head(wd.msi)
wd.msi <- as.data.frame(with(wd, tapply(steps, interval, mean)))
wk.msi <- as.data.frame(with(wk, tapply(steps, interval, mean)))
names(wd.msi) <- "steps"
names(wk.msi) <- "steps"
wk.msi$interval <- rownames(wk.msi)
wd.msi$interval <- rownames(wd.msi)
wd.msi$type <- "weekday"
wk.msi$type <- "weekend"
msi.new <- rbind(wd.msi, wk.msi)
#Make plots:
xyplot(steps ~ interval | type, data = msi.new, type = "l")
xyplot(steps ~ interval | type, data = msi.new, type = "l", layout = c(1, 2))
summary(msi.new)
msi.new$interval <- as.numeric(msi.new$interval)
xyplot(steps ~ interval | type, data = msi.new, type = "l", layout = c(1, 2))
ac <- read.csv(unz("activity.zip", "activity.csv"))
getwd()
setwd("./RepData_PeerAssessments1/")
setwd("./RepData_PeerAssessment1/")
ac <- read.csv(unz("activity.zip", "activity.csv"))
head(ac)
getwd
getwd()
setwd("C:/Users/Miao Yi/Desktop/R/wd/")
getwd
getwed()
getwd()
setwd("./RepData_PeerAssessment1/")
setwd("C:/Users/Miao Yi/Desktop/R/wd")
getwd()
setwd("./RepData_PeerAssessment1")
